name: Build RimWorld Mod DLL

################################################################################
# Change these only if you move folders around
################################################################################
env:
  MOD_SRC_PATH: Source/1.6            # .csproj lives here
  DLL_DEST_PATH: 1.6/Assemblies       # final DLL location in repo root
  ARTIFACT_NAME: MyMenuButtonModDLL

################################################################################
# Build on pushes & PRs (skip README edits)
################################################################################
on:
  push:
    branches: [ main, master ]
    paths-ignore: [ 'README.md' ]
  pull_request:

################################################################################
# Job: compile on Windows ➜ copy DLL ➜ upload artifact
################################################################################
jobs:
  build:
    runs-on: windows-latest

    steps:
    # 1️⃣ Pull the repo
    - name: Check out repository
      uses: actions/checkout@v4

    # 2️⃣ Install .NET SDK 8 (includes .NET Framework reference packs)
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # 3️⃣ Restore NuGet packages
    - name: Restore packages
      run: dotnet restore "${{ env.MOD_SRC_PATH }}"

    # 4️⃣ Build in Release mode (no custom OutDir)
    - name: Build (Release)
      run: dotnet build "${{ env.MOD_SRC_PATH }}" --configuration Release --no-restore

    # 5️⃣ Locate ALL new DLLs under Source/1.6 (skip reference DLLs) and copy
    #    them to repo-root/1.6/Assemblies/.
    - name: Copy DLL to 1.6/Assemblies/
      shell: pwsh
      run: |
        $workspace = "${{ github.workspace }}"
        $dest      = Join-Path $workspace '${{ env.DLL_DEST_PATH }}'
        New-Item -ItemType Directory -Force -Path $dest | Out-Null

        $dlls = Get-ChildItem -Path '${{ env.MOD_SRC_PATH }}' -Filter *.dll -Recurse |
                  Where-Object { $_.FullName -notmatch '\\ref\\' }

        if (-not $dlls) {
          Write-Error "No DLLs found under $env:MOD_SRC_PATH after build."
        }

        $dlls | Copy-Item -Destination $dest -Force
        Write-Host "Copied $($dlls.Count) DLL(s) to $dest"
        Get-ChildItem $dest

    # 6️⃣ Upload the DLL(s) so you can download them from the Actions run
    - name: Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.DLL_DEST_PATH }}/*.dll
